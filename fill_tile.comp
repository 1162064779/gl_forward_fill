#version 430
// 计算着色器：瓦片内空洞填充
// 功能：在256像素宽的瓦片内进行局部填充，修复索引顺序，记录边缘信息
layout(local_size_x = 256) in;  // 每个工作组256个线程（对应256像素宽）

// 输入输出纹理绑定
layout(binding = 2, rgba8) uniform coherent image2D  imgColor;    // 颜色纹理（RGBA8格式）
layout(binding = 4, r32ui) uniform coherent uimage2D imgIndex;    // 索引纹理（R32UI格式）
layout(binding = 5, rgba32ui) uniform coherent uimage2D edgeTex;  // 边缘信息纹理（RGBA32UI格式）

// 全局参数
uniform int orgWidth;   // 原始图像宽度
uniform int orgHeight;  // 原始图像高度
uniform int eyeSign;    // 眼睛符号（+1为左眼，-1为右眼）

const uint UUNDEF = 0xFFFFFFFFu;  // 未定义值的标记

// 共享内存：存储当前瓦片的数据
shared vec4  sColor[256];  // 256个像素的颜色值
shared uint  sIndex[256];  // 256个像素的索引值

/**
 * 瓦片内填充函数
 * 使用交替填充策略：奇数轮从右向左，偶数轮从左向右
 * @param width 当前瓦片的实际宽度（可能小于256）
 */
void shift_fill_tile(int width){
    // 执行width次填充迭代
    for(int it=0; it<width; ++it){
        // 检查当前像素是否需要填充（索引为未定义状态）
        bool need  = (sIndex[gl_LocalInvocationID.x]==UUNDEF);
        if(!need){ barrier(); continue; }  // 如果不需要填充，等待同步后继续

        // 交替填充策略：偶数轮从右向左，奇数轮从左向右
        bool takeRight = (it & 1)==0;
        int  x   = int(gl_LocalInvocationID.x);
        
        // 检查左右邻居是否有效（索引不为未定义）
        bool leftValid  = (x>0)             && (sIndex[x-1]!=UUNDEF);
        bool rightValid = (x<width-1)       && (sIndex[x+1]!=UUNDEF);

        // 根据策略和邻居有效性进行填充
        if( takeRight && rightValid ){
            // 从右邻居复制颜色和索引
            sColor[x] = sColor[x+1];
            sIndex[x] = sIndex[x+1];
        }else if( !takeRight && leftValid ){
            // 从左邻居复制颜色和索引
            sColor[x] = sColor[x-1];
            sIndex[x] = sIndex[x-1];
        }
        barrier();  // 同步所有线程，确保数据一致性
    }
}

void main()
{
    // 计算当前线程的全局位置
    uint tileX = gl_WorkGroupID.x * 256u;  // 当前瓦片的起始X坐标
    uint x     = gl_LocalInvocationID.x;   // 瓦片内的局部X坐标
    uint y     = gl_WorkGroupID.y;         // 全局Y坐标
    
    // 边界检查：如果超出图像高度则退出
    if(y>=uint(orgHeight)) return;

    // 计算全局列坐标和有效性
    uint col = tileX + x;
    bool inside = col < uint(orgWidth);

    // 从全局纹理加载数据到共享内存
    if(inside){
        // 加载有效像素的颜色和索引
        sColor[x] = imageLoad(imgColor , ivec2(int(col),int(y)));
        sIndex[x] = imageLoad(imgIndex , ivec2(int(col),int(y))).x;
    }else{
        // 瓦片边缘外的像素设为默认值
        sColor[x] = vec4(0.0);
        sIndex[x] = UUNDEF;
    }
    barrier();  // 等待所有线程完成数据加载

    // 第一次填充：在瓦片内进行局部填充
    shift_fill_tile(min(256, orgWidth-int(tileX)));

    // 索引顺序修复：确保索引符合眼睛的观察顺序
    int w = min(256, orgWidth-int(tileX));  // 当前瓦片的实际宽度
    int xi = int(x);
    bool bad=false;
    if(xi < w){
        // 左眼：索引应该从左到右递增
        if(eyeSign>0 && xi<w-1){
            bad = (sIndex[xi]!=UUNDEF && sIndex[xi+1]!=UUNDEF && sIndex[xi] > sIndex[xi+1]);
        }
        // 右眼：索引应该从右到左递增
        else if(eyeSign<0 && xi>0){
            bad = (sIndex[xi-1]!=UUNDEF && sIndex[xi]!=UUNDEF && sIndex[xi-1] > sIndex[xi]);
        }
    }
    // 如果发现顺序错误，重置为未定义状态
    if(bad) sIndex[xi] = UUNDEF;
    barrier();  // 等待所有线程完成索引修复

    // 第二次填充：修复索引后再次填充
    shift_fill_tile(w);

    // 将处理后的数据写回全局纹理
    if(inside){
        imageStore(imgColor, ivec2(int(col),int(y)), sColor[x]);
        imageStore(imgIndex, ivec2(int(col),int(y)), uvec4(sIndex[x],0,0,0));
    }

    // 记录瓦片边缘信息，供后续瓦片间传播使用
    if(x==0u){
        // 记录左边缘：颜色（转换为位模式）+ 索引
        imageStore(edgeTex, ivec2(int(tileX/256u*2  ), int(y)),
                   uvec4(floatBitsToUint(sColor[0].x), sIndex[0], 0,0));
    }
    if(x==uint(w-1)){
        // 记录右边缘：颜色（转换为位模式）+ 索引
        imageStore(edgeTex, ivec2(int(tileX/256u*2+1), int(y)),
                   uvec4(floatBitsToUint(sColor[x].x), sIndex[x], 0,0));
    }
} 