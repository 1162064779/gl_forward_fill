#version 430
layout(local_size_x = 256) in;
layout(binding = 2, rgba8) uniform coherent image2D  imgColor;
layout(binding = 4, r32ui) uniform coherent uimage2D imgIndex;
layout(binding = 5, rgba32ui) uniform coherent uimage2D edgeTex;

uniform int orgWidth;
uniform int orgHeight;
uniform int eyeSign;
const uint UUNDEF = 0xFFFFFFFFu;

shared vec4  sColor[256];
shared uint  sIndex[256];

void shift_fill_tile(int width){
    for(int it=0; it<width; ++it){
        bool need  = (sIndex[gl_LocalInvocationID.x]==UUNDEF);
        if(!need){ barrier(); continue; }

        bool takeRight = (it & 1)==0;
        int  x   = int(gl_LocalInvocationID.x);
        bool leftValid  = (x>0)             && (sIndex[x-1]!=UUNDEF);
        bool rightValid = (x<width-1)       && (sIndex[x+1]!=UUNDEF);

        if( takeRight && rightValid ){
            sColor[x] = sColor[x+1];
            sIndex[x] = sIndex[x+1];
        }else if( !takeRight && leftValid ){
            sColor[x] = sColor[x-1];
            sIndex[x] = sIndex[x-1];
        }
        barrier();
    }
}

void main()
{
    uint tileX = gl_WorkGroupID.x * 256u;
    uint x     = gl_LocalInvocationID.x;
    uint y     = gl_WorkGroupID.y;
    if(y>=uint(orgHeight)) return;

    uint col = tileX + x;
    bool inside = col < uint(orgWidth);

    if(inside){
        sColor[x] = imageLoad(imgColor , ivec2(int(col),int(y)));
        sIndex[x] = imageLoad(imgIndex , ivec2(int(col),int(y))).x;
    }else{
        sColor[x] = vec4(0.0);
        sIndex[x] = UUNDEF;
    }
    barrier();

    shift_fill_tile(min(256, orgWidth-int(tileX)));

    int w = min(256, orgWidth-int(tileX));
    int xi = int(x);
    bool bad=false;
    if(xi < w){
        if(eyeSign>0 && xi<w-1){
            bad = (sIndex[xi]!=UUNDEF && sIndex[xi+1]!=UUNDEF && sIndex[xi] > sIndex[xi+1]);
        }else if(eyeSign<0 && xi>0){
            bad = (sIndex[xi-1]!=UUNDEF && sIndex[xi]!=UUNDEF && sIndex[xi-1] > sIndex[xi]);
        }
    }
    if(bad) sIndex[xi] = UUNDEF;
    barrier();

    shift_fill_tile(w);

    if(inside){
        imageStore(imgColor, ivec2(int(col),int(y)), sColor[x]);
        imageStore(imgIndex, ivec2(int(col),int(y)), uvec4(sIndex[x],0,0,0));
    }

    if(x==0u){
        imageStore(edgeTex, ivec2(int(tileX/256u*2  ), int(y)),
                   uvec4(floatBitsToUint(sColor[0].x), sIndex[0], 0,0));
    }
    if(x==uint(w-1)){
        imageStore(edgeTex, ivec2(int(tileX/256u*2+1), int(y)),
                   uvec4(floatBitsToUint(sColor[x].x), sIndex[x], 0,0));
    }
} 