#version 430
layout(local_size_x = 16, local_size_y = 16) in;

/* 输入（原始大小） */
layout(binding = 0) uniform sampler2D  srcColor;
layout(binding = 1) uniform sampler2D  srcDepth;

/* 输出（原始大小） */
layout(binding = 2, rgba8) writeonly  uniform image2D  dstColor;
layout(binding = 3, r32ui) coherent   uniform uimage2D dstDepth;
layout(binding = 4, r32ui)  coherent uniform uimage2D dstIndex; 

/* uniform */
uniform int   orgWidth;
uniform int   orgHeight;
uniform int   padSize;        // 复制边缘宽
uniform int   paddedWidth;    // = orgWidth + 2*padSize
uniform float shiftScale;     // k
uniform float shiftBias;      // b

/* 工具 */
// 将归一化的深度值（0.0~1.0）编码为32位无符号整数，便于原子操作和高精度存储
uint encodeDepth(float d){ return uint(clamp(d,0.0,1.0)*4294967295.0); }

void tryWrite(ivec2 paddedPos, vec4 c, uint d, uint idx)
{
    // ---------- 1. 过滤掉左右填充 ----------
    if(paddedPos.x < padSize || paddedPos.x >= padSize + orgWidth)//unpad
        return;
    // ---------- 2. 去掉 padSize 得到真正的列号 ----------
    ivec2 dstPos = ivec2(paddedPos.x - padSize, paddedPos.y);
    // ---------- 3. 深度竞争 & 写入 ----------
    uint old = imageAtomicMax(dstDepth, dstPos, d);
    if(d > old){
        imageStore(dstColor, dstPos, vec4(c.rgb, 1.0));
        imageStore(dstIndex, dstPos, uvec4(idx,0,0,0));
    }
}

/* ----------------------------------------------------------------- */
void main(){
    ivec2 gid=ivec2(gl_GlobalInvocationID.xy);
    if(gid.x>=paddedWidth || gid.y>=orgHeight) return;

    /* === Replication Pad (读取侧) === */
    int srcX = clamp(gid.x - padSize, 0, orgWidth-1);

    vec4  C = texelFetch(srcColor, ivec2(srcX,gid.y), 0);
    float Z = texelFetch(srcDepth, ivec2(srcX,gid.y), 0).r;

    float disp   = Z*shiftScale + shiftBias;
    float xPrime = float(gid.x) + disp;
    int   xFloor = int(floor(xPrime));

    uint dEnc = encodeDepth(Z);
    uint idx  = uint(srcX);

    tryWrite(ivec2(xFloor    , gid.y), C, dEnc, idx);
    tryWrite(ivec2(xFloor + 1, gid.y), C, dEnc, idx);
}