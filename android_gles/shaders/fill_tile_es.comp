#version 320 es
// ------------------------------------------------------------
// 默认精度
// ------------------------------------------------------------
precision highp float;
precision highp int;
precision highp uint;

// ------------------------------------------------------------
// 线程布局
// ------------------------------------------------------------
layout(local_size_x = 256) in;
const uint TILE   = 256u;  // ← 变成 uint   // = local_size_x
const uint shift_len = 16u;

// ------------------------------------------------------------
// image 绑定
// ------------------------------------------------------------
// 颜色贴图：同一张纹理绑定两次                                 
//这样做的目的是因为在一些安卓机子上，rgba格式的数据（rgba8，rgba32）只能声明为read或者write，不能同时读写。
//一些安卓机子上，这样的写法虽然可以通过编译，但是先执行了读操作，再执行写操作，会导致写操作失效。
layout(binding = 6, rgba8) readonly  uniform highp image2D imgColorR; // 读
layout(binding = 2, rgba8) writeonly uniform highp image2D imgColorW; // 写
layout(binding = 4, r32ui) uniform highp uimage2D imgIndex;  // 读+写

// ------------------------------------------------------------
uniform int orgWidth;
uniform int orgHeight;
uniform int  eyeSign;   // +1 = 左眼(递增), -1 = 右眼(递减)

const uint UUNDEF = 0xFFFFFFFFu;
const uint INF_DIST = 0xFFFFu;

// ------------------------------------------------------------
// 共享内存
// ------------------------------------------------------------
shared vec4 sColorL[TILE], sColorR[TILE];   // “取最近左值/右值” 得到的颜色
shared uint sIndexL[TILE], sIndexR[TILE];   // 对应索引
shared uint sDistL[TILE],  sDistR[TILE];    // 离最近左/右有效像素的距离

// ------------------------------------------------------------
// 左向指数扩散：读取 x-stride 的状态来更新 x
// ------------------------------------------------------------
void propagateLeft(int W, int shift_w)
{
    for (int stride = 1; stride < shift_w; stride <<= 1)
    {
        uint x = gl_LocalInvocationID.x;

        if (x >= uint(stride) && sIndexL[x] == UUNDEF)
        {
            uint srcIdx  = sIndexL[x - uint(stride)];
            if (srcIdx != UUNDEF)
            {
                uint candDist = sDistL[x - uint(stride)] + uint(stride);
                if (candDist < sDistL[x])               // 更近 → 覆盖
                {
                    sIndexL[x] = srcIdx;
                    sColorL[x] = sColorL[x - uint(stride)];
                    sDistL [x] = candDist;
                }
            }
        }
        barrier();                                      // 写完后同步
    }
}

// ------------------------------------------------------------
// 右向指数扩散：读取 x+stride 的状态来更新 x
// ------------------------------------------------------------
void propagateRight(int W, int shift_w)
{
    for (int stride = 1; stride < shift_w; stride <<= 1)
    {
        uint x = gl_LocalInvocationID.x;

        if (x + uint(stride) < uint(W) && sIndexR[x] == UUNDEF)
        {
            uint srcIdx  = sIndexR[x + uint(stride)];
            if (srcIdx != UUNDEF)
            {
                uint candDist = sDistR[x + uint(stride)] + uint(stride);
                if (candDist < sDistR[x])
                {
                    sIndexR[x] = srcIdx;
                    sColorR[x] = sColorR[x + uint(stride)];
                    sDistR [x] = candDist;
                }
            }
        }
        barrier();
    }
}

// ------------------------------------------------------------
void main()
{
    uint xLocal = gl_LocalInvocationID.x;       
    uint y      = gl_WorkGroupID.y;
    if (y >= uint(orgHeight)) return;

    // 当前 tile 覆盖的像素列范围
    uint tileX  = gl_WorkGroupID.x * TILE;
    uint col    = tileX + xLocal;
    bool inside = col < uint(orgWidth);

    // ---------- 读入全局像素 ----------------------------------------
    vec4  C = vec4(0.0);
    uint  I = UUNDEF;

    if (inside)
    {
        C = imageLoad(imgColorR, ivec2(int(col), int(y)));
        I = imageLoad(imgIndex , ivec2(int(col), int(y))).x;
    }

    sColorL[xLocal] = C;  sColorR[xLocal] = C;
    sIndexL[xLocal] = I;  sIndexR[xLocal] = I;
    sDistL [xLocal] = (I != UUNDEF) ? 0u : INF_DIST;
    sDistR [xLocal] = (I != UUNDEF) ? 0u : INF_DIST;
    barrier();

    // 本 tile 实际要处理的列数（≤20 且 ≤ TILE）
    int W = min(int(TILE), orgWidth - int(tileX));
    int shift_w = min(int(shift_len), orgWidth - int(tileX));

/* ---------- 第一次 Shift-Fill ---------- */
    propagateRight(W,shift_w);      // 先右
    propagateLeft (W,shift_w);      // 再左

    /* ---------- 选 winner (等距右优先) ---------- */
    uint finalIdx;
    vec4 finalCol;
    if (sDistR[xLocal] <= sDistL[xLocal]) {
        finalIdx = sIndexR[xLocal];
        finalCol = sColorR[xLocal];
    } else {
        finalIdx = sIndexL[xLocal];
        finalCol = sColorL[xLocal];
    }

    // /* ---------- 把第一次结果写回共享数组 ---------- */
    // sIndexL[xLocal] = sIndexR[xLocal] = finalIdx;
    // sColorL[xLocal] = sColorR[xLocal] = finalCol;
    // sDistL [xLocal] = sDistR [xLocal] = (finalIdx != UUNDEF) ? 0u : INF_DIST;
    // barrier();

    // /* ---------- 索引顺序检测 / 挖洞 ---------- */
    // if (int(xLocal) < W)
    // {
    //     bool bad = false;
    //     if (eyeSign > 0) {                 // 左眼 : 递增
    //         if (int(xLocal) < W - 1) {
    //             uint a = sIndexL[xLocal];
    //             uint b = sIndexL[xLocal + 1u];
    //             bad = (a != UUNDEF && b != UUNDEF && a > b);
    //         }
    //     } else if (eyeSign < 0) {          // 右眼 : 递减
    //         if (xLocal > 0u) {
    //             uint a = sIndexL[xLocal - 1u];
    //             uint b = sIndexL[xLocal];
    //             bad = (a != UUNDEF && b != UUNDEF && a > b);
    //         }
    //     }
    //     if (bad) {
    //         sIndexL[xLocal] = sIndexR[xLocal] = UUNDEF;
    //         sDistL [xLocal] = sDistR [xLocal] = INF_DIST;
    //     }
    // }
    // barrier();

    // /* ---------- 第二次 Shift-Fill ---------- */
    // propagateRight(W,shift_w);
    // propagateLeft (W,shift_w);

    // if (sDistR[xLocal] <= sDistL[xLocal]) {
    //     finalIdx = sIndexR[xLocal];
    //     finalCol = sColorR[xLocal];
    // } else {
    //     finalIdx = sIndexL[xLocal];
    //     finalCol = sColorL[xLocal];
    // }

    /* ---------- 写回到图像 ---------- */
    if (inside)
    {
        imageStore(imgColorW, ivec2(int(col), int(y)), finalCol);
        // imageStore(imgIndex , ivec2(int(col), int(y)),
        //            uvec4(finalIdx, 0u, 0u, 0u));
    }
}