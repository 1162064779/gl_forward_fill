#version 430
// 计算着色器：瓦片间前缀传播填充
// 功能：利用瓦片边缘信息，将填充信息从一个瓦片传播到相邻瓦片，处理跨瓦片的空洞
layout(local_size_x = 256) in;  // 每个工作组256个线程（这里主要用于同步）

// 输入输出纹理绑定
layout(binding = 2, rgba8)  uniform coherent image2D  imgColor;    // 颜色纹理（RGBA8格式）
layout(binding = 4, r32ui)  uniform coherent uimage2D imgIndex;    // 索引纹理（R32UI格式）
layout(binding = 5, rgba32ui) uniform coherent uimage2D edgeTex;   // 边缘信息纹理（RGBA32UI格式）

// 全局参数
uniform int orgWidth;   // 原始图像宽度
uniform int orgHeight;  // 原始图像高度
uniform int numTile;    // 瓦片数量（图像宽度/256向上取整）

const uint UUNDEF = 0xFFFFFFFFu;  // 未定义值的标记

void main(){
    // 获取当前线程的Y坐标（每个线程处理一行）
    uint y = gl_GlobalInvocationID.y;
    
    // 边界检查：如果超出图像高度则退出
    if(y>=uint(orgHeight)) return;

    // 状态变量：记录当前有效的填充信息
    // last.x: 颜色值（32位浮点数的位模式）
    // last.y: 索引值
    // last.z, last.w: 未使用
    uvec4 last = uvec4(0, UUNDEF,0,0);
    
    // 从左到右扫描所有瓦片，进行前缀传播
    for(int t=0; t<numTile; ++t){
        // 读取当前瓦片的左右边缘信息
        uvec4 leftEdge = imageLoad(edgeTex, ivec2(t*2  , int(y)));  // 左边缘
        uvec4 rightEdge= imageLoad(edgeTex, ivec2(t*2+1, int(y)));  // 右边缘

        // 情况1：如果当前没有有效信息，但左边缘有信息，则开始使用左边缘信息
        if(last.y==UUNDEF && leftEdge.y!=UUNDEF){
            last = leftEdge;  // 更新状态为左边缘信息
        }
        
        // 情况2：如果当前有有效信息，但左边缘是空洞，则开始填充当前瓦片
        if(last.y!=UUNDEF && leftEdge.y==UUNDEF){
            // 计算当前瓦片的像素范围
            int start = t*256;                    // 瓦片起始X坐标
            int end   = min(start+256, orgWidth); // 瓦片结束X坐标（不超过图像边界）
            
            // 遍历当前瓦片的所有像素
            for(int x=start; x<end; ++x){
                // 读取当前像素的索引
                uint idx = imageLoad(imgIndex, ivec2(x,int(y))).x;
                
                // 如果像素索引为未定义（空洞），则进行填充
                if(idx==UUNDEF){
                    // 使用last中存储的颜色信息填充
                    // uintBitsToFloat(last.x)将位模式转换回浮点数
                    imageStore(imgColor, ivec2(x,int(y)),
                               vec4(uintBitsToFloat(last.x)));
                    
                    // 使用last中存储的索引信息
                    imageStore(imgIndex, ivec2(x,int(y)),
                               uvec4(last.y,0,0,0));
                }
            }
        }
        
        // 情况3：如果右边缘有有效信息，更新状态为右边缘信息
        // 这为下一个瓦片做准备
        if(rightEdge.y!=UUNDEF) last = rightEdge;
    }
} 